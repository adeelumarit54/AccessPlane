{"version":3,"file":"commands.js","mappings":"YAMA,IAAIA,EA+BJ,SAASC,EAAoBC,GAC3B,IAAMC,EAAQD,EAAYE,aACpBC,EAAWH,EAAYI,MAE7BN,EAAYO,GAAGC,SAAS,CAAC,GAAG,SAAUC,GACpC,GAAIA,EAASC,SAAWC,OAAOC,kBAAkBC,UAAW,CACvCJ,EAASH,MAAMQ,KAAI,SAAAC,GAAa,OAAAA,EAAUC,YAAV,IAAnD,IACMC,EAASC,OAAOC,aAAaC,QAAQ,gBACrCC,EAAOH,OAAOC,aAAaC,QAAQ,qBAEnCE,EAAoBC,KAAKC,MAAMH,GAErCI,QAAQC,IAAI,gBAAiBT,GAC7BQ,QAAQC,IAAI,sBAAuBJ,GAGnCtB,EAAY2B,QAAQnB,UAAS,SAAUoB,GACrC,GAAIA,EAAclB,SAAWC,OAAOC,kBAAkBC,UAAW,CAC/D,IAAMc,EAAUC,EAActB,MAC9BmB,QAAQC,IAAI,WAAYC,GAGxB,IAAME,EAAY,IAAIC,QACtBD,EAAUE,OAAO,eAAgB,oBACjCF,EAAUE,OAAO,gBAAiB,UAAYd,GAE9C,IAAMe,EAAMT,KAAKU,UAAU,CACzBC,aAAc,OACdC,SAAUb,EAAkBc,GAC5BC,oBAAqB,KACrBC,QAASX,GAAW,aACpBY,KAAMlC,IAURmC,MAAM,8EAPiB,CACrBC,OAAQ,OACRC,QAASb,EACTc,KAAMX,IAKLY,MAAK,SAAAC,GAAY,OAAAA,EAASC,MAAT,IACjBF,MAAK,SAAAG,GACJtB,QAAQC,IAAI,sBAAuBqB,GACnC5C,EAAM6C,UAAU,CAAEC,YAAY,GAChC,IACCC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAM,mBAAoBA,GAClChD,EAAM6C,UAAU,CAAEC,YAAY,GAChC,GACJ,MACExB,QAAQ0B,MAAM,0BACdhD,EAAM6C,UAAU,CAAEC,YAAY,GAElC,GAEF,MACExB,QAAQ0B,MAAM,6BACdhD,EAAM6C,UAAU,CAAEC,YAAY,GAElC,GACF,CA5FAtC,OAAOyC,SAAQ,WAEbpD,EAAcW,OAAO0C,QAAQC,QAAQC,IACvC,IA6FA5C,OAAO6C,QAAQC,UAAU,UAvFzB,SAAgBtD,G,MACRuD,EAA6C,CACjDC,KAAMhD,OAAOiD,aAAaC,4BAA4BC,qBACtDJ,QAAS,oBACTK,KAAM,aACNC,YAAY,GAIa,QAA3BC,EAAAtD,OAAO0C,QAAQC,QAAQC,YAAI,IAAAU,GAAAA,EAAEC,qBAAqBC,aAChD,gCACAT,GAIFvD,EAAM6C,WACR,IAwEArC,OAAO6C,QAAQC,UAAU,gBAvEzB,SAAsBtD,GACpBH,EAAY2C,KAAKnC,SAAS,OAAQ,CAAEJ,aAAcD,GAASF,EAC7D,G","sources":["webpack://office-addin-taskpane-react/./src/commands/commands.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global Office */\nlet mailboxItem;\nOffice.onReady(() => {\n  // If needed, Office.js is ready to be called.\n  mailboxItem = Office.context.mailbox.item;\n});\n\n/**\n * Shows a notification when the add-in command is executed.\n * @param event\n */\nfunction action(event: Office.AddinCommands.Event) {\n  const message: Office.NotificationMessageDetails = {\n    type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,\n    message: \"Performed action.\",\n    icon: \"Icon.80x80\",\n    persistent: true,\n  };\n\n  // Show a notification message.\n  Office.context.mailbox.item?.notificationMessages.replaceAsync(\n    \"ActionPerformanceNotification\",\n    message\n  );\n\n  // Be sure to indicate when the add-in command function is complete.\n  event.completed();\n}\nfunction validateBody(event) {\n  mailboxItem.body.getAsync(\"text\", { asyncContext: event }, checkBodyAndCallAPI);\n}\n\nfunction checkBodyAndCallAPI(asyncResult) {\n  const event = asyncResult.asyncContext;\n  const bodyText = asyncResult.value;\n\n  mailboxItem.to.getAsync({}, function (toResult) {\n    if (toResult.status === Office.AsyncResultStatus.Succeeded) {\n      const recipients = toResult.value.map(recipient => recipient.emailAddress);\n      const tokken = window.localStorage.getItem(\"access_token\");\n      const User = window.localStorage.getItem(\"communicationUser\");\n\n      const communicationUser = JSON.parse(User);\n\n      console.log(\"Access Token:\", tokken);\n      console.log(\"Communication User:\", communicationUser);\n\n      // âœ… Get subject asynchronously\n      mailboxItem.subject.getAsync(function (subjectResult) {\n        if (subjectResult.status === Office.AsyncResultStatus.Succeeded) {\n          const subject = subjectResult.value;\n          console.log(\"Subject:\", subject);\n\n          // Prepare API headers and payload\n          const myHeaders = new Headers();\n          myHeaders.append(\"Content-Type\", \"application/json\");\n          myHeaders.append(\"Authorization\", \"Bearer \" + tokken);\n\n          const raw = JSON.stringify({\n            MappedIDType: \"User\",\n            MappedID: communicationUser.ID,\n            CommunicationTypeID: \"-1\",\n            Subject: subject || \"No subject\",\n            Body: bodyText,\n          });\n\n          const requestOptions = {\n            method: \"POST\",\n            headers: myHeaders,\n            body: raw,\n          };\n\n          // Call the API\n          fetch(\"https://outlookdemo.accessplanit.com/accessplansandbox/api/v2/communication\", requestOptions)\n            .then(response => response.json())\n            .then(result => {\n              console.log(\"API call succeeded:\", result);\n              event.completed({ allowEvent: true });\n            })\n            .catch(error => {\n              console.error(\"API call failed:\", error);\n              event.completed({ allowEvent: false });\n            });\n        } else {\n          console.error(\"Failed to get subject.\");\n          event.completed({ allowEvent: false });\n        }\n      });\n\n    } else {\n      console.error(\"Failed to get recipients.\");\n      event.completed({ allowEvent: false });\n    }\n  });\n}\n\n\n// Register the function with Office.\nOffice.actions.associate(\"action\", action);\nOffice.actions.associate(\"validateBody\", validateBody);\n\n"],"names":["mailboxItem","checkBodyAndCallAPI","asyncResult","event","asyncContext","bodyText","value","to","getAsync","toResult","status","Office","AsyncResultStatus","Succeeded","map","recipient","emailAddress","tokken_1","window","localStorage","getItem","User","communicationUser_1","JSON","parse","console","log","subject","subjectResult","myHeaders","Headers","append","raw","stringify","MappedIDType","MappedID","ID","CommunicationTypeID","Subject","Body","fetch","method","headers","body","then","response","json","result","completed","allowEvent","catch","error","onReady","context","mailbox","item","actions","associate","message","type","MailboxEnums","ItemNotificationMessageType","InformationalMessage","icon","persistent","_a","notificationMessages","replaceAsync"],"sourceRoot":""}